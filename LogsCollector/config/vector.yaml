api:
  enabled: true

# Controls if sources will wait for destination sinks to deliver the events,
# or persist them to a disk buffer, before acknowledging receipt.
# If set to true, all capable sources will have acknowledgements enabled.
acknowledgements:
  enabled: true

data_dir: ./data

sources:
  fileIn:
    type: "file"
    glob_minimum_cooldown_ms: 1000
    include: 
      - ${FILE_SOURCE_PATH}
    # Start reading from the current end of the file.
    # read_from: end

    # Whether or not to include the "file" tag on the component's corresponding internal metrics.
    # This is useful for distinguishing between different files while monitoring.
    # However, the tag's cardinality is unbounded.
    internal_metrics:
      include_file_tag: true

transforms:
  msg_parser:
    type: remap
    inputs: [fileIn]
    source: |
      # better to do this check on function level
      # assert_eq!(exists(.file), exists(.message), message: "The required fields are not received")
      
      # https://vector.dev/docs/reference/vrl/functions/#encode_json
      #.=encode_json({"FilePath": .file, "Message": .message})

      # send everything to sinks
      .=.

sinks:

  console_print:
    type: console
    inputs:
      - "msg_parser"
    encoding:
      codec: "json"

  http:
    type: "http"
    method: post
    inputs:
      - "msg_parser"
    uri: ${HTTP_SINK_URI}
    # tls certificate should be configured for production case
    tls:
      verify_certificate: false
    encoding:
      codec: "json"

    # auth:
    #   strategy: "bearer"
    #   token: "<your_bash_source_token>"

    request:
      # Vector will retry failed requests (status in [408, 429], >= 500, and != 501).
      # Other responses will not be retried. You can control the number of retry attempts and backoff rate 
      # with the request.retry_attempts and request.retry_backoff_secs options.
      retry_attempts: 3

      # # https://vector.dev/docs/reference/configuration/sinks/http/#request
      # # Only one request can be outstanding at any given time.
      # concurrency: none

    # # add if needed later
    #   headers:
    #     Source: "some_value"
